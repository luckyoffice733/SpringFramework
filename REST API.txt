API -> Application Programming Interface:
-----------------------------------------
The main objective of API is two applications can communicate with each other. 
API allows external agent to communicate (integrate and exchange information) with our application.
In Simple way: 'Methods of communication between software components'

Eg1: By using API a java application can communicate with python application.
Book my show application can communicate with Payment gateway application to complete our booking.


Web API/Web Service:
----------------------
The interface of communication between the user and application over the web by using 
HTTP is nothing but Web API.


REST: Representational State Transfer:
--------------------------------------
Representational State Transfer(REST) is an architectural style.

It defines several Rules/Guide Lines to develop Web APIs/Web Services By using REST, we can develop web APIs very easily in concise way.

Hence REST is the most popular Architecture to develop Web Services.


Restful API:
------------
The API which is developed by using REST Architecture is nothing but Restful API. 
i.e. interface between the user and application where API implements REST Architecture.


HTTP METHODS:
-----------
HTTP Methods represent the type of operation what we required.

Based on requirement we have to use the corresponding HTTP verb.

The following are various HTTP Verbs
1) GET -> To get one/more existing resources
2) POST -> To create a new resource
3) PUT -> To update an existing resource like update all fields of employee
4) PATCH -> To perform partial updating of an existing resource like updating only salary 
of employee
5) DELETE -> To delete an existing resource.

HTTP Verbs vs Database CRUD Operations:
-----------------------------------------
C (CREATE) -> POST
R (RETRIEVE/READ) -> GET
U (UPDATE) -> PUT/PATCH
D (DELETE) -> DELETE


Status Codes:
-------------
Status code represents the status of HTTP Response. The following are various possible 
status codes.

1XX -> Informational
2XX -> Successful
3XX -> Redirection
4XX -> Client Error
5XX -> Server Error

Maven:
======
Maven is an build tool.

Build -> to convert /package the project into jar/war/ear

Repositories --> Local(.m2)/Central(maven)/remote(Company)

Scopes :--  runtime/compile/provided

LifeCycle or goals --> compile/package/clean/install/deploy/test




Difference Between CrudRepository and PaginationAndSortingRepository

Difference Between CrudRepository and JpaRepository





1)Spring Core(Dependency injection->Setter/Constructor/Collection injection)
2)IOC(inversion of control) --> we will not create the object for the bean class, Container will create
the objects and we will use those object while injecting into class reference variable(Loosely Coupled).

//search for the life cycle method of IOC containers
Container:
----------
Bean Container
ApplicationContainer -->ApplicationContext
@PostConstruct
@PreDestroy

b) Autowire -->injecting the dependency object.(with out ref tag)
byType    --> @Autowired   --> on property/field
byName    --> @Autowired    --> On setter Method
constructor -->@Autowired   ---> On constructor

c)Bean Scopes:-- by default containers will create the bean class object and store in which default scope
  "singleton"
 singleton:- object created only once and try to inject into multiple class reference variable will get the 
same reference.

 ii)prototype :- for each class reference variable instance ,it will create a new object.


In How Many we can create SpringBoot Project:
==============================================
start.io.spring --->spring Initializer
Download ->STS  --> File->New->SpringStarterProject



4)IN SpringBoot we eliminated or removes the configuration file(.xml) and replace with annotations
  
//setter and constructors Dependency injections --> @Value followed CommandLineRunner


5)SpringData Jpa --> 
======================
spring-boot-starter-data-jpa



interfaces (JpaRepository,PageingAndSortingRepository and CrudRepository)
Difference between all the repositories.
Note:
-----
by default above repositories will perform basic crud operation using primary key (ID).

Custom Spring Data Query:
==========================
Other than the primary key(Id) field, you need to fetch the data based on other fields/properties/attributes.


1)Query Method Approach ---> findBy or getBy 

Qns: Book(bookId,bookName,authorName,price)
----
write a custom JPQL  to get the data based on authorName?

soL:- Book findByAuthorName(String authName);

2)@Query Annotation(positional parameter(?) and NamedParameter(:)-->@Param) /Dyamic Query execution
3)@NamedQuery(name="",query="") //static Query




SpringBootRestApi:
------------------
spring-boot-starter-web   //pom.xml//starter


RestFul-Representational State transfer.It is Architecural style.

how to share the data using RestApi --> json

1)@Repository
2)@Service
3)@RestController
4)@ResponseBody
5)@PathVaribale/@RequestParam
6)@RequestMapping
7)ResponseEntity   --> Refer to Topic(RestFul Api Intro...)


GlobalException:
================
@RestContollerAdvice/@Controller
@ExceptionHandler

Validation:
===========
spring-boot-starter-validations -->Starter

==> @Valid @RequestBody

@NotNull
@NotEmpty
@NotBlank
@Email
@Pattern
@PastOrPresent
@Future
@FutureOrPresent

==>MethodArugmentNotValidException --> handled by @ExceptionHandler in GlobalException class


PathVariableValidation:->  on top of class we need to annotated @Validated - throws the exception
                             ConstraintViolationException.

///
Converting Dto to Entity and Entity to DTO



SpringSecurity/SpringBootSecurity:
==================================
Authentication
Authorization

1)SpringBootBasicAuthentication
2)JWT Token



























































